{"version":3,"sources":["CalcScreen.js","CalcKey.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalcScreen","children","this","props","react_default","a","createElement","className","Component","CalcKey","_this$props","area","onClick","style","gridArea","concat","keys","value","Calculator","state","display","_this","setState","_this2","Fragment","src_CalcScreen","map","o","src_CalcKey","key","App","src_Calculator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.126bad93.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CalcScreen extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return <div className=\"CalcScreen\">{children}</div>;\r\n  }\r\n}\r\n\r\nexport default CalcScreen;\r\n","import React, { Component } from 'react';\r\n\r\nclass CalcKey extends Component {\r\n  render() {\r\n    const { area, onClick, children } = this.props;\r\n    return (\r\n      <button\r\n        onClick={onClick}\r\n        className=\"CalcKey\"\r\n        style={{ gridArea: `${area}` }}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalcKey;\r\n","import React, { Component } from 'react';\r\n\r\nimport CalcScreen from './CalcScreen';\r\nimport CalcKey from './CalcKey';\r\n\r\nconst keys = [\r\n  { value: 'AC', area: 'ac' },\r\n  { value: '+/-', area: 'pm' },\r\n  { value: 'Del', area: 'del' },\r\n  { value: '÷', area: 'div' },\r\n  { value: '7', area: 'sev' },\r\n  { value: '8', area: 'eig' },\r\n  { value: '9', area: 'nin' },\r\n  { value: '×', area: 'mul' },\r\n  { value: '4', area: 'fou' },\r\n  { value: '5', area: 'fiv' },\r\n  { value: '6', area: 'six' },\r\n  { value: '−', area: 'sub' },\r\n  { value: '1', area: 'one' },\r\n  { value: '2', area: 'two' },\r\n  { value: '3', area: 'thr' },\r\n  { value: '+', area: 'add' },\r\n  { value: '0', area: 'zer' },\r\n  { value: '.', area: 'dec' },\r\n  { value: '=', area: 'eq' },\r\n];\r\n\r\nclass Calculator extends Component {\r\n  state = {\r\n    display: '0',\r\n  };\r\n\r\n  onClick = value => () => this.setState({ display: value });\r\n\r\n  render() {\r\n    const { display } = this.state;\r\n    return (\r\n      <div className=\"Calc\">\r\n        <div className=\"CalcGrid\">\r\n          <React.Fragment>\r\n            <CalcScreen>{display}</CalcScreen>\r\n            {keys.map(o => (\r\n              <CalcKey\r\n                key={o.value}\r\n                area={o.area}\r\n                onClick={this.onClick(o.value)}\r\n              >\r\n                {o.value}\r\n              </CalcKey>\r\n            ))}\r\n          </React.Fragment>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\n\nimport Calculator from './Calculator';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}